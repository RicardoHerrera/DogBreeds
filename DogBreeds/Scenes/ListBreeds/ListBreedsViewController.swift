//
//  ListBreedsViewController.swift
//  DogBreeds
//
//  Created by Nisum on 6/12/18.
//  Copyright (c) 2018 Nisum. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import JGProgressHUD

protocol ListBreedsDisplayLogic: class
{
    func displayFetchedBreeds(viewModel: ListBreeds.FetchBreeds.ViewModel)
}

class ListBreedsViewController: UITableViewController, ListBreedsDisplayLogic
{
    var interactor: ListBreedsBusinessLogic?
    var router: (NSObjectProtocol & ListBreedsRoutingLogic & ListBreedsDataPassing)?
    var displayedBreeds: [ListBreeds.FetchBreeds.ViewModel.DisplayedBreed] = []
    var hud: JGProgressHUD!
        
    // Mark: - Initialization
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: - Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = ListBreedsInteractor()
        let presenter = ListBreedsPresenter()
        let router = ListBreedsRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: - Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: - View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        fetchBreeds()
    }
    
    // MARK: - Fetch Breeds
    func fetchBreeds() {
        // show loading view
        if hud == nil {
            hud = JGProgressHUD(style: .dark)
        }
        hud.textLabel.text = "Loading"
        hud.show(in: self.view)
        
        let request = ListBreeds.FetchBreeds.Request()
        interactor?.fetchBreeds(request: request)
    }
    
    func displayFetchedBreeds(viewModel: ListBreeds.FetchBreeds.ViewModel) {
        //Hide loading view
        DispatchQueue.main.async {
            if let hud = self.hud {
                hud.dismiss()
            }
        }
        
        if viewModel.errorMessage != nil {
            hud.textLabel.text = viewModel.errorMessage
            hud.indicatorView = JGProgressHUDErrorIndicatorView();
            hud.show(in: self.view)
            hud.dismiss(afterDelay: 3.0)
            displayedBreeds = []
        } else {
            displayedBreeds = viewModel.displayedBreeds
        }
        DispatchQueue.main.async {
            self.tableView.reloadData()
        }
    }
    
    // MARK: - Table view data source
    
    override func numberOfSections(in tableView: UITableView) -> Int
    {
        return 1
    }
    
    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int
    {
        return displayedBreeds.count
    }
    
    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell
    {
        let displayedBreed = displayedBreeds[indexPath.row]
        var cell = tableView.dequeueReusableCell(withIdentifier: "BreedTableViewCell")
        if cell == nil {
            cell = UITableViewCell(style: .value1, reuseIdentifier: "BreedTableViewCell")
        }
        cell?.textLabel?.text = displayedBreed.name
        return cell!
    }
}

