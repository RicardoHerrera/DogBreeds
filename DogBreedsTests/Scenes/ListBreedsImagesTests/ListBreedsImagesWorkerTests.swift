//
//  ListBreedsImagesWorkerTests.swift
//  DogBreeds
//
//  Created by Nisum on 6/13/18.
//  Copyright (c) 2018 Nisum. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import DogBreeds
import XCTest

class ListBreedsImagesWorkerTests: XCTestCase
{
    // MARK: Subject under test
    
    var sut: ListBreedsImagesWorker!
    static var testBreedImagesURLs: [String]!
    
    // MARK: Test lifecycle
    
    override func setUp()
    {
        super.setUp()
        setupListBreedsImagesWorker()
    }
    
    override func tearDown()
    {
        super.tearDown()
    }
    
    // MARK: Test setup
    
    func setupListBreedsImagesWorker()
    {
        sut = ListBreedsImagesWorker(breedsStore: BreedsAPISpy())
        ListBreedsImagesWorkerTests.testBreedImagesURLs = ["https://images.dog.ceo/breeds/spaniel-blenheim/n02086646_1002.jpg", "https://images.dog.ceo/breeds/spaniel-blenheim/n02086646_1014.jpg"]
    }
    
    // MARK: Test doubles
    
    class BreedsAPISpy: BreedsAPI
    {
        // MARK: Method call expectations
        
        var fetchBreedImagesURLsCalled = false
        
        // MARK: Spied methods
        
        override func fetchBredImagesURLs(forBreed breedname: String, completionHandler: @escaping ([String], BreedsStoreError?) -> Void) {
            fetchBreedImagesURLsCalled = true
            completionHandler(ListBreedsImagesWorkerTests.testBreedImagesURLs, nil)
        }
    }
    
    // MARK: Tests
    
    func testFetchOrdersShouldReturnListOfOrders()
    {
        // Given
        let breedsAPISpy = sut.breedsStore as! BreedsAPISpy
        
        // When
        var fetchedBreedURLs = [String]()
        let expect = expectation(description: "Wait for fetchBreeds() to return")
        sut.fetchBreedImageURLs(breedName: "Spaniel") { (urls, error) in
            fetchedBreedURLs = urls
            expect.fulfill()
        }
        waitForExpectations(timeout: 1.1)
        
        // Then
        XCTAssert(breedsAPISpy.fetchBreedImagesURLsCalled, "Calling fetchBreeds() should ask the data store for a list of breeds")
        XCTAssertEqual(fetchedBreedURLs.count, ListBreedsImagesWorkerTests.testBreedImagesURLs.count, "fetchBreeds() should return a list of breeds")
        for url in fetchedBreedURLs {
            XCTAssert(ListBreedsImagesWorkerTests.testBreedImagesURLs.contains(url), "Fetched breeds should match the breeds in the data store")
        }
    }
}


