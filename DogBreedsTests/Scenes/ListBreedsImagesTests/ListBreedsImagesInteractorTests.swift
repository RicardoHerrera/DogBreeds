//
//  ListBreedsImagesInteractorTests.swift
//  DogBreeds
//
//  Created by Nisum on 6/13/18.
//  Copyright (c) 2018 Nisum. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import DogBreeds
import XCTest

class ListBreedsImagesInteractorTests: XCTestCase
{
    // MARK: Subject under test
    
    var sut: ListBreedsImagesInteractor!
    
    // MARK: Test lifecycle
    
    override func setUp()
    {
        super.setUp()
        setupListBreedsImagesInteractor()
    }
    
    override func tearDown()
    {
        super.tearDown()
    }
    
    // MARK: Test setup
    
    func setupListBreedsImagesInteractor()
    {
        sut = ListBreedsImagesInteractor()
    }
    
    // MARK: Test doubles
    
    class ListBreedsImagesPresentationLogicSpy: ListBreedsImagesPresentationLogic
    {
        // MARK: Method call expectations
        
        var storageBreedImagesURLsCalled = false
        
        // MARK: Spied methods
        
        func storageBreedImagesURLs(response: ListBreedsImages.FetchImagesURLs.Response) {
            storageBreedImagesURLsCalled = true
        }
    }
    
    class ListBreedsImagesWorkerSpy: ListBreedsImagesWorker
    {
        // MARK: Method call expectations
        
        var fetchBreedsCalled = false
        
        // MARK: Spied methods
        
        override func fetchBreedImageURLs(breedName: String, completionHandler: @escaping ([String], BreedsStoreError?) -> Void) {
            fetchBreedsCalled = true
            completionHandler(["https://images.dog.ceo/breeds/spaniel-blenheim/n02086646_1002.jpg"], nil)
        }
    }
    
    // MARK: Tests
    
    func testFetchBreedImagesURLsShouldAskPresenterToReturnResultt()
    {
        // Given
        let spy = ListBreedsImagesPresentationLogicSpy()
        sut.presenter = spy
        sut.breed = Breed(name: "Spaniel")
        let breedsImageURLsWorkerSpy = ListBreedsImagesWorkerSpy(breedsStore: BreedsAPI())
        sut.worker = breedsImageURLsWorkerSpy
        
        // When
        let request = ListBreedsImages.FetchImagesURLs.Request()
        sut.fetchBreedImagesURLs(request: request)
        
        // Then
        XCTAssert(breedsImageURLsWorkerSpy.fetchBreedsCalled, "FetchBreeds() should ask BreedsWorker to fetch breeds")
        XCTAssertTrue(spy.storageBreedImagesURLsCalled, "fetchBreedImagesURLs(request:) should ask the presenter to Storage the result")
    }
}


