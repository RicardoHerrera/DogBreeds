//
//  ListBreedsInteractorTests.swift
//  DogBreeds
//
//  Created by Nisum on 6/13/18.
//  Copyright (c) 2018 Nisum. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import DogBreeds
import XCTest

class ListBreedsInteractorTests: XCTestCase
{
    // MARK: - Subject under test
    
    var sut: ListBreedsInteractor!
    
    // MARK: - Test lifecycle
    
    override func setUp()
    {
        super.setUp()
        setupListBreedsInteractor()
    }
    
    override func tearDown()
    {
        super.tearDown()
    }
    
    // MARK: - Test setup
    
    func setupListBreedsInteractor()
    {
        sut = ListBreedsInteractor()
    }
    
    // MARK: - Test doubles
    
    class ListBreedsPresentationLogicSpy: ListBreedsPresentationLogic
    {
        // MARK: Method call expectations
        var presentFetchedBreedsCalled = false
        
        // MARK: Spied methods
        func presentFetchedBreeds(response: ListBreeds.FetchBreeds.Response) {
            presentFetchedBreedsCalled = true
        }
    }
    
    class ListBreedsWorkerSpy: ListBreedsWorker
    {
        // MARK: Method call expectations
        
        var fetchBreedsCalled = false
        
        // MARK: Spied methods
        
        override func fetchBreeds(completionHandler: @escaping ([Breed], BreedsStoreError?) -> Void) {
            fetchBreedsCalled = true
            completionHandler([Breed(name: "Spaniel"), Breed(name: "beagle")], nil)
        }
    }
    
    // MARK: Tests
    
    func testFetchBreedsShouldAskPresenterToReturnResult()
    {
        // Given
        let listBreedsPresentationLogicSpy = ListBreedsPresentationLogicSpy()
        sut.presenter = listBreedsPresentationLogicSpy
        let listBreedWorkerSpy = ListBreedsWorkerSpy(breedsStore: BreedsAPI())
        sut.worker = listBreedWorkerSpy
        // When
        let request = ListBreeds.FetchBreeds.Request()
        sut.fetchBreeds(request: request)
        
        //Then
        XCTAssert(listBreedWorkerSpy.fetchBreedsCalled, "FetchBreeds() should ask BreedsWorker to fetch breeds")
        XCTAssert(listBreedsPresentationLogicSpy.presentFetchedBreedsCalled, "FetchBreeds() should ask presenter to return result")
    }
}

