//
//  ListBreedsWorkerTests.swift
//  DogBreeds
//
//  Created by Nisum on 6/13/18.
//  Copyright (c) 2018 Nisum. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import DogBreeds
import XCTest

class ListBreedsWorkerTests: XCTestCase
{
    // MARK: Subject under test
    
    var sut: ListBreedsWorker!
    static var testBreeds: [Breed]!
    
    // MARK: Test lifecycle
    
    override func setUp()
    {
        super.setUp()
        setupListBreedsWorker()
    }
    
    override func tearDown()
    {
        super.tearDown()
    }
    
    // MARK: Test setup
    
    func setupListBreedsWorker()
    {
        sut = ListBreedsWorker(breedsStore: BreedsAPISpy())        
        ListBreedsWorkerTests.testBreeds = [Breed(name: "Spanniel"), Breed(name: "beagle")]
    }
    
    // MARK: Test doubles
    
    class BreedsAPISpy: BreedsAPI
    {
        // MARK: Method call expectations
        
        var fetchBreedsCalled = false
        
        // MARK: Spied methods
        
        override func fetchBreeds(completionHandler: @escaping ([Breed], BreedsStoreError?) -> Void) {
            fetchBreedsCalled = true
            completionHandler(ListBreedsWorkerTests.testBreeds, nil)
        }
    }
    
    // MARK: Tests
    
    func testFetchOrdersShouldReturnListOfOrders()
    {
        // Given
        let breedsAPISpy = sut.breedsStore as! BreedsAPISpy
        
        // When
        var fetchedBreeds = [Breed]()
        let expect = expectation(description: "Wait for fetchBreeds() to return")
        sut.fetchBreeds { (breeds, error) in
            fetchedBreeds = breeds
            expect.fulfill()
        }
        waitForExpectations(timeout: 1.1)
        
        // Then
        XCTAssert(breedsAPISpy.fetchBreedsCalled, "Calling fetchBreeds() should ask the data store for a list of breeds")
        XCTAssertEqual(fetchedBreeds.count, ListBreedsWorkerTests.testBreeds.count, "fetchBreeds() should return a list of breeds")
        for breed in fetchedBreeds {
            XCTAssert(ListBreedsWorkerTests.testBreeds.contains(breed), "Fetched breeds should match the breeds in the data store")
        }
    }
}

