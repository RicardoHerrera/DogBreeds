//
//  ListBreedsPresenterTests.swift
//  DogBreeds
//
//  Created by Nisum on 6/13/18.
//  Copyright (c) 2018 Nisum. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import DogBreeds
import XCTest

class ListBreedsPresenterTests: XCTestCase
{
    // MARK: Subject under test
    
    var sut: ListBreedsPresenter!
    
    // MARK: Test lifecycle
    
    override func setUp()
    {
        super.setUp()
        setupListBreedsPresenter()
    }
    
    override func tearDown()
    {
        super.tearDown()
    }
    
    // MARK: Test setup
    
    func setupListBreedsPresenter()
    {
        sut = ListBreedsPresenter()
    }
    
    // MARK: Test doubles
    
    class ListBreedsDisplayLogicSpy: ListBreedsDisplayLogic
    {
        // MARK: Method call expectations
        
        var displayFetchedBreedsCalled = false
        var displayLoadingHudCalled = false
        var dismissLoadingHudCalled = false
        var displayErrorCalled = false
        
        // MARK: Argument expectations
        
        var viewModel: ListBreeds.FetchBreeds.ViewModel!
        
        // MARK: Spied Methods
        
        func displayFetchedBreeds(viewModel: ListBreeds.FetchBreeds.ViewModel) {
            displayFetchedBreedsCalled = true
            self.viewModel = viewModel
        }
        
        func displayLoadingHud() {
            displayLoadingHudCalled = true
        }
        
        func dismissLoadingHud() {
            dismissLoadingHudCalled = true
        }
        
        func displayError(error: String) {
            displayErrorCalled = true
        }
    }
    
    // MARK: Tests
    
    func testPresentFetchedBreedsShouldFormatFetchedBreedsForDisplay()
    {
        // Given
        let listBreedsDisplayLogicSpy = ListBreedsDisplayLogicSpy()
        sut.viewController = listBreedsDisplayLogicSpy
        
        // When
        let breed = Breed(name: "Spaniel")
        let response = ListBreeds.FetchBreeds.Response(breeds: [breed], error: nil)
        sut.presentFetchedBreeds(response: response)
        
        // Then
        let displayedBreeds = listBreedsDisplayLogicSpy.viewModel.displayedBreeds
        for breed in displayedBreeds {
            XCTAssertEqual(breed.name, "Spaniel")
        }
    }
    
    func testPresentFetchedBreedsShouldAskViewControllerToDisplayFetchedBreeds() {
        // Given
        let listBreedsDisplayLogicSpy = ListBreedsDisplayLogicSpy()
        sut.viewController = listBreedsDisplayLogicSpy
        
        // When
        let response = ListBreeds.FetchBreeds.Response(breeds: [], error: nil)
        sut.presentFetchedBreeds(response: response)
        
        // Then
        XCTAssert(listBreedsDisplayLogicSpy.displayFetchedBreedsCalled, "Presenting fetched breeds should ask view controller to display them")
    }
}

