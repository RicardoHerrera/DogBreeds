//
//  ListBreedsViewControllerTests.swift
//  DogBreeds
//
//  Created by Nisum on 6/13/18.
//  Copyright (c) 2018 Nisum. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import DogBreeds
import XCTest

class ListBreedsViewControllerTests: XCTestCase
{
    // MARK: - Subject under test
    
    var sut: ListBreedsViewController!
    var window: UIWindow!
    
    // MARK: - Test lifecycle
    
    override func setUp()
    {
        super.setUp()
        window = UIWindow()
        setupListBreedsViewController()
    }
    
    override func tearDown()
    {
        window = nil
        super.tearDown()
    }
    
    // MARK: - Test setup
    
    func setupListBreedsViewController()
    {
        let bundle = Bundle.main
        let storyboard = UIStoryboard(name: "Main", bundle: bundle)
        sut = storyboard.instantiateViewController(withIdentifier: "ListBreedsViewController") as! ListBreedsViewController
    }
    
    func loadView()
    {
        window.addSubview(sut.view)
        RunLoop.current.run(until: Date())
    }
    
    // MARK: - Test doubles
    
    class ListBreedsBusinessLogicSpy: ListBreedsBusinessLogic
    {
        var breeds: [Breed]?
        
        // MARK: Method call expectations
        
        var fetchBreedsCalled = false
        
        // MARK: Spied methods
        
        func fetchBreeds(request: ListBreeds.FetchBreeds.Request) {
            fetchBreedsCalled = true
        }
    }
    
    class TableViewSpy: UITableView
    {
        // MARK: Method call expectations
        
        var reloadDataCalled = false
        
        // MARK: Spied methods
        
        override func reloadData()
        {
            reloadDataCalled = true
        }
    }
    
    // MARK: Tests
    
    func testShouldFetchBreedsWhenViewIsLoaded()
    {
        // Given
        let listBreedsBusinessLogicSpy = ListBreedsBusinessLogicSpy()
        sut.interactor = listBreedsBusinessLogicSpy
        
        // When
        loadView()
        
        // Then
        XCTAssertTrue(listBreedsBusinessLogicSpy.fetchBreedsCalled, "viewDidLoad() should ask the interactor to fetch breeds")
    }
    
    func testShouldDisplayBreeds()
    {
        // Given
        let tableViewSpy = TableViewSpy()
        sut.tableView = tableViewSpy
        
        // When
        let displayedBreeds = [ListBreeds.FetchBreeds.ViewModel.DisplayedBreed(name: "Spaniel")]
        let viewModel = ListBreeds.FetchBreeds.ViewModel(displayedBreeds: displayedBreeds)
        sut.displayFetchedBreeds(viewModel: viewModel)
        
        // Then
        XCTAssert(tableViewSpy.reloadDataCalled, "Displaying fetched breeds should reload the table view")
    }
}

